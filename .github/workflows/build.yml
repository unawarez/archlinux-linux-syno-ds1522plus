name: Build and release kernel packages
on:
  workflow_dispatch:
  push:
    branches: main
    paths:
      - "!.github"
      - ".github/workflows/build.yml"
      - "!README*"
      - "!.gitignore"
      - "!synobuild"
defaults:
  run:
    # required to get `-eo pipefail`
    shell: bash

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    container: archlinux:base-devel
    steps:
      - name: Initialize pacman & get prereqs
        run: |
          pacman-key --init
          pacman -Sy git pacman-contrib github-cli --noconfirm
        # WARN: not doing -Syu, so technically installing anything is UB, but what is being installed seems harmless
        # and -Syu usually downloads a lot.
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: unavoidable git dubious ownership workaround
        # actions/checkout is supposed to do this, but something something containers
        run: git config --global --add safe.directory "$(realpath .)"
      # makepkg fails even for printsrcinfo if uid==0 or if the src dir isn't writable.
      - name: "Setup non-root access so that makepkg doesn't insta-die"
        run: |
          useradd -m user
          echo 'user ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers  # even root needs user password otherwise
          chown --recursive user .
      - name: Regenerate .SRCINFO
        run: sudo -u user makepkg --printsrcinfo > .SRCINFO
      - name: Regenerate PKGBUILD checksums
        # updpkgsums is impl'd in terms of makepkg so it can't run as root.
        # also means user needs write perms to PKGBUILD.
        run: sudo -u user updpkgsums
      - name: Commit and push if necessary
        run: |
          if [ -n "$(git ls-files -m)" ]; then
            git config --global user.name "build bot"
            git config --global user.email "build@bot"
            git commit -a -m "bot chore: update .SRCINFO and pkgbuild sums"
            git push
          fi
      # even if we did a sneaky commit&push there, the cwd checkout will be the latest.
      # but it does mean github.sha would be wrong. not great but works for this for now.
      - name: Get upstream PGP keys
        # this is very sensitive to choice of keyserver per key.
        # keyserver.ubuntu.com should be the gpg default now.
        # linus' key isn't found with either server lol.
        # TODO why is there the keys/ dir in here? what is the threat model?
        # TODO freshen these, or just load ./keys/*
        run: |
          sudo -u user gpg --keyserver hkps://keys.openpgp.org --recv-keys A2FF3A36AAA56654109064AB19802F8B0D70FC30
          sudo -u user gpg --recv-keys ABAF11C65A2970B130ABE3C479BE3E4300411886 647F28654894E3BD457199BE38DBBDC86092693E B8AC08600F108CDF
      - name: Run makepkg
        run: sudo -u user MAKEFLAGS="$MAKEFLAGS -j$(nproc)" makepkg -s --noconfirm
      - name: Create release
        # TODO try not to source pkgbuild with github token in the env...
        run: |
          tar cvf /tmp/packages.tar linux-syno*.pkg.*
          # want to get the actual version being built. closest thing i found to doc'd "which fields affect the package version?" is "epoch:version-rel" in the pacman manual.
          (source PKGBUILD; echo -n "${epoch:-1}:$pkgver-${pkgrel:-1}" > VERSION)
          export VERSION="$(cat VERSION)"
          echo Package version: "$VERSION"
          gh release create --repo ${{ github.repository }} "v$VERSION" /tmp/packages.tar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
